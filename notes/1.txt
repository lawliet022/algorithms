1. Matrix Exponentiation and Recurrance Relation:-
	http://zobayer.blogspot.com/2010/11/matrix-exponentiation.html
	UVA - 10229, 10754, 10870, other form above link
	See fibo.cpp code for matrix exponentiation and multiplication

2. Binary Exponentiation works with operations that are associative
	A*(B*C) = (A*B)*C
	
3. If m is prime number and is coprime with x, we can calculate x^n % m more faster than normal binary exponentiation
	as x^(n%(m-1)) % m			[from Ferments Little Theorem]

4. Fast mod multiplication (Not sure if it works always)
	
	// Fast Method
	long double x = (long double)a*b/MOD;
	int y = (unsigned int) x;
	int ans = a*b - y*MOD;
	if(ans < 0)
		ans += MOD;
		
5. Modular inverse:-
	if m is prime => modpow(a,m-2,m);
	if a and m is coprime => modpow(a,phi(m)-1,m)		// but we need to calculate phi(m) in sqrt(m) first
	see modinv of range in O(m) for [1,m-1]
	

6. Binary Search
	
	// finding smallest index where function value changes
    int ans = -1;                       
    int l = 0, r = 100;
    while(l <= r){
		int mid = (l+r)/2;
		if(!ok(mid)){
			ans = mid;
			l = mid+1;
		}
		else{
			r = mid-1;
		}
	}
    cout << ans + 1 << "\n";
	
7. Sorting with comparator inside only
	sort(lt.begin(), lt.end(), [&](int i, int j) {
      return b[i] > b[j];
    });
    
8. Removing duplicates
	sort(a.begin(),a.end());
	a.resize(unique(a.begin(), a.end()) - a.begin());


9. DP Optimizations - https://jeffreyxiao.me/blog/tags/dynamic-programming

10. For every index i you can calculate number of elements less/greater than this element before it or after it using 
	BIT. For every element, do range update at a[i]th postition by +1 to last (no need to do last implicitly) and then for next
	element i+1 you can query sum of (0,a[i+1]-1) to get count of numbers less than this current element. Similary for
	greater than elements. 
	See:- https://practice.geeksforgeeks.org/viewSol.php?subId=19371726&pid=165&user=kickstart
	
	You can also reduce complexity from O(nlog(MAX_ELE)) to O(nlogn) by index compression
	
	This concept can be used to find inversion count in array.
	
11. 
